// Generated by gencpp from file locate/navigate_and_imu_data.msg
// DO NOT EDIT!


#ifndef LOCATE_MESSAGE_NAVIGATE_AND_IMU_DATA_H
#define LOCATE_MESSAGE_NAVIGATE_AND_IMU_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace locate
{
template <class ContainerAllocator>
struct navigate_and_imu_data_
{
  typedef navigate_and_imu_data_<ContainerAllocator> Type;

  navigate_and_imu_data_()
    : GPSWeek(0)
    , GPSTime(0.0)
    , Heading_Angle(0.0)
    , Latitude(0.0)
    , Longitude(0.0)
    , Altitude(0.0)
    , Speed(0.0)
    , Status(0)
    , Satellite_num(0)
    , Warning()
    , UTM_x(0.0)
    , UTM_y(0.0)  {
    }
  navigate_and_imu_data_(const ContainerAllocator& _alloc)
    : GPSWeek(0)
    , GPSTime(0.0)
    , Heading_Angle(0.0)
    , Latitude(0.0)
    , Longitude(0.0)
    , Altitude(0.0)
    , Speed(0.0)
    , Status(0)
    , Satellite_num(0)
    , Warning(_alloc)
    , UTM_x(0.0)
    , UTM_y(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _GPSWeek_type;
  _GPSWeek_type GPSWeek;

   typedef double _GPSTime_type;
  _GPSTime_type GPSTime;

   typedef double _Heading_Angle_type;
  _Heading_Angle_type Heading_Angle;

   typedef double _Latitude_type;
  _Latitude_type Latitude;

   typedef double _Longitude_type;
  _Longitude_type Longitude;

   typedef double _Altitude_type;
  _Altitude_type Altitude;

   typedef double _Speed_type;
  _Speed_type Speed;

   typedef int32_t _Status_type;
  _Status_type Status;

   typedef int32_t _Satellite_num_type;
  _Satellite_num_type Satellite_num;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _Warning_type;
  _Warning_type Warning;

   typedef double _UTM_x_type;
  _UTM_x_type UTM_x;

   typedef double _UTM_y_type;
  _UTM_y_type UTM_y;





  typedef boost::shared_ptr< ::locate::navigate_and_imu_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::locate::navigate_and_imu_data_<ContainerAllocator> const> ConstPtr;

}; // struct navigate_and_imu_data_

typedef ::locate::navigate_and_imu_data_<std::allocator<void> > navigate_and_imu_data;

typedef boost::shared_ptr< ::locate::navigate_and_imu_data > navigate_and_imu_dataPtr;
typedef boost::shared_ptr< ::locate::navigate_and_imu_data const> navigate_and_imu_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::locate::navigate_and_imu_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::locate::navigate_and_imu_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::locate::navigate_and_imu_data_<ContainerAllocator1> & lhs, const ::locate::navigate_and_imu_data_<ContainerAllocator2> & rhs)
{
  return lhs.GPSWeek == rhs.GPSWeek &&
    lhs.GPSTime == rhs.GPSTime &&
    lhs.Heading_Angle == rhs.Heading_Angle &&
    lhs.Latitude == rhs.Latitude &&
    lhs.Longitude == rhs.Longitude &&
    lhs.Altitude == rhs.Altitude &&
    lhs.Speed == rhs.Speed &&
    lhs.Status == rhs.Status &&
    lhs.Satellite_num == rhs.Satellite_num &&
    lhs.Warning == rhs.Warning &&
    lhs.UTM_x == rhs.UTM_x &&
    lhs.UTM_y == rhs.UTM_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::locate::navigate_and_imu_data_<ContainerAllocator1> & lhs, const ::locate::navigate_and_imu_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace locate

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::locate::navigate_and_imu_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::locate::navigate_and_imu_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::locate::navigate_and_imu_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::locate::navigate_and_imu_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::locate::navigate_and_imu_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::locate::navigate_and_imu_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::locate::navigate_and_imu_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5fa00f7bd774592428828ebc763abd79";
  }

  static const char* value(const ::locate::navigate_and_imu_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5fa00f7bd7745924ULL;
  static const uint64_t static_value2 = 0x28828ebc763abd79ULL;
};

template<class ContainerAllocator>
struct DataType< ::locate::navigate_and_imu_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "locate/navigate_and_imu_data";
  }

  static const char* value(const ::locate::navigate_and_imu_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::locate::navigate_and_imu_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 GPSWeek\n"
"float64 GPSTime\n"
"float64 Heading_Angle\n"
"float64 Latitude\n"
"float64 Longitude\n"
"float64 Altitude\n"
"float64 Speed\n"
"int32 Status\n"
"int32 Satellite_num\n"
"string Warning\n"
"float64 UTM_x\n"
"float64 UTM_y\n"
;
  }

  static const char* value(const ::locate::navigate_and_imu_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::locate::navigate_and_imu_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.GPSWeek);
      stream.next(m.GPSTime);
      stream.next(m.Heading_Angle);
      stream.next(m.Latitude);
      stream.next(m.Longitude);
      stream.next(m.Altitude);
      stream.next(m.Speed);
      stream.next(m.Status);
      stream.next(m.Satellite_num);
      stream.next(m.Warning);
      stream.next(m.UTM_x);
      stream.next(m.UTM_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct navigate_and_imu_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::locate::navigate_and_imu_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::locate::navigate_and_imu_data_<ContainerAllocator>& v)
  {
    s << indent << "GPSWeek: ";
    Printer<int32_t>::stream(s, indent + "  ", v.GPSWeek);
    s << indent << "GPSTime: ";
    Printer<double>::stream(s, indent + "  ", v.GPSTime);
    s << indent << "Heading_Angle: ";
    Printer<double>::stream(s, indent + "  ", v.Heading_Angle);
    s << indent << "Latitude: ";
    Printer<double>::stream(s, indent + "  ", v.Latitude);
    s << indent << "Longitude: ";
    Printer<double>::stream(s, indent + "  ", v.Longitude);
    s << indent << "Altitude: ";
    Printer<double>::stream(s, indent + "  ", v.Altitude);
    s << indent << "Speed: ";
    Printer<double>::stream(s, indent + "  ", v.Speed);
    s << indent << "Status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Status);
    s << indent << "Satellite_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Satellite_num);
    s << indent << "Warning: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Warning);
    s << indent << "UTM_x: ";
    Printer<double>::stream(s, indent + "  ", v.UTM_x);
    s << indent << "UTM_y: ";
    Printer<double>::stream(s, indent + "  ", v.UTM_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCATE_MESSAGE_NAVIGATE_AND_IMU_DATA_H
