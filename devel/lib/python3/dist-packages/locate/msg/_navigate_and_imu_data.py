# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from locate/navigate_and_imu_data.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class navigate_and_imu_data(genpy.Message):
  _md5sum = "5fa00f7bd774592428828ebc763abd79"
  _type = "locate/navigate_and_imu_data"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 GPSWeek
float64 GPSTime
float64 Heading_Angle
float64 Latitude
float64 Longitude
float64 Altitude
float64 Speed
int32 Status
int32 Satellite_num
string Warning
float64 UTM_x
float64 UTM_y"""
  __slots__ = ['GPSWeek','GPSTime','Heading_Angle','Latitude','Longitude','Altitude','Speed','Status','Satellite_num','Warning','UTM_x','UTM_y']
  _slot_types = ['int32','float64','float64','float64','float64','float64','float64','int32','int32','string','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       GPSWeek,GPSTime,Heading_Angle,Latitude,Longitude,Altitude,Speed,Status,Satellite_num,Warning,UTM_x,UTM_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(navigate_and_imu_data, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.GPSWeek is None:
        self.GPSWeek = 0
      if self.GPSTime is None:
        self.GPSTime = 0.
      if self.Heading_Angle is None:
        self.Heading_Angle = 0.
      if self.Latitude is None:
        self.Latitude = 0.
      if self.Longitude is None:
        self.Longitude = 0.
      if self.Altitude is None:
        self.Altitude = 0.
      if self.Speed is None:
        self.Speed = 0.
      if self.Status is None:
        self.Status = 0
      if self.Satellite_num is None:
        self.Satellite_num = 0
      if self.Warning is None:
        self.Warning = ''
      if self.UTM_x is None:
        self.UTM_x = 0.
      if self.UTM_y is None:
        self.UTM_y = 0.
    else:
      self.GPSWeek = 0
      self.GPSTime = 0.
      self.Heading_Angle = 0.
      self.Latitude = 0.
      self.Longitude = 0.
      self.Altitude = 0.
      self.Speed = 0.
      self.Status = 0
      self.Satellite_num = 0
      self.Warning = ''
      self.UTM_x = 0.
      self.UTM_y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i6d2i().pack(_x.GPSWeek, _x.GPSTime, _x.Heading_Angle, _x.Latitude, _x.Longitude, _x.Altitude, _x.Speed, _x.Status, _x.Satellite_num))
      _x = self.Warning
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.UTM_x, _x.UTM_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.GPSWeek, _x.GPSTime, _x.Heading_Angle, _x.Latitude, _x.Longitude, _x.Altitude, _x.Speed, _x.Status, _x.Satellite_num,) = _get_struct_i6d2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Warning = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Warning = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.UTM_x, _x.UTM_y,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i6d2i().pack(_x.GPSWeek, _x.GPSTime, _x.Heading_Angle, _x.Latitude, _x.Longitude, _x.Altitude, _x.Speed, _x.Status, _x.Satellite_num))
      _x = self.Warning
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.UTM_x, _x.UTM_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.GPSWeek, _x.GPSTime, _x.Heading_Angle, _x.Latitude, _x.Longitude, _x.Altitude, _x.Speed, _x.Status, _x.Satellite_num,) = _get_struct_i6d2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Warning = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Warning = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.UTM_x, _x.UTM_y,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_i6d2i = None
def _get_struct_i6d2i():
    global _struct_i6d2i
    if _struct_i6d2i is None:
        _struct_i6d2i = struct.Struct("<i6d2i")
    return _struct_i6d2i
